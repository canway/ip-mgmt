# -*- coding: utf-8 -*-
"""
This program is named IP Management Center and it is a tool to help network administrators manage enterprise IP resource pool reasonably and conveniently.
Copyright (C) <2021>  <Guangzhou Canway Technology Co.,Ltd.>
Contact details: jackliu@canway.net or 11th Floor, Building A，Fengxing Plaza No. 67 Tianhe East Road Tianhe District, Guangzhou, China 510630. jackliu, 15927493530
This file is part of IP Management Center.
IP Management Center is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
IP Management Center is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Canway software. If not, see <https://www.gnu.org/licenses/>.
"""  # noqa
# Generated by Django 2.2.6 on 2021-07-16 11:00

import django.db.models.deletion
import django_mysql.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CmdbSync",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=200, null=True, verbose_name="名称")),
                ("create_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="创建时间")),
                ("update_at", models.DateTimeField(auto_now=True, null=True, verbose_name="更新时间")),
                ("update_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="修改人")),
                ("description", models.CharField(blank=True, max_length=500, null=True, verbose_name="描述")),
                ("remark", models.CharField(blank=True, max_length=500, null=True, verbose_name="备注")),
                ("model_id", models.CharField(max_length=100, verbose_name="模型ID")),
                ("create_by", models.CharField(default="", max_length=100, verbose_name="创建者")),
                ("priority", models.IntegerField(verbose_name="优先级")),
                ("bk_cloud_id", models.CharField(blank=True, max_length=100, null=True, verbose_name="云区域ID")),
                ("ip", models.CharField(max_length=100, verbose_name="ip")),
                ("sync", models.BooleanField(default=False)),
                (
                    "attribute_map",
                    django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="字段映射"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CustomAttr",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        choices=[("ip_pool", "IP地址池自定义属性"), ("tetwork_segment", "子网自定义属性"), ("ips", "ip自定义属性")],
                        max_length=100,
                        verbose_name="适用类型",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True, verbose_name="名称")),
                ("display_name", models.CharField(max_length=100, verbose_name="显示名称")),
                ("create_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="创建时间")),
                ("create_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="创建人")),
                ("required", models.BooleanField(verbose_name="是否必填")),
                ("description", models.CharField(blank=True, max_length=500, null=True, verbose_name="描述")),
            ],
        ),
        migrations.CreateModel(
            name="IpNet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=200, null=True, verbose_name="名称")),
                ("create_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="创建时间")),
                ("update_at", models.DateTimeField(auto_now=True, null=True, verbose_name="更新时间")),
                ("create_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="创建人")),
                ("update_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="修改人")),
                ("description", models.CharField(blank=True, max_length=500, null=True, verbose_name="描述")),
                ("remark", models.CharField(blank=True, max_length=500, null=True, verbose_name="备注")),
                ("bk_cloud_id", models.IntegerField(blank=True, null=True, verbose_name="云区域ID")),
                ("gateway", models.CharField(blank=True, max_length=100, null=True, verbose_name="网关")),
                ("dns", models.CharField(blank=True, max_length=100, null=True, verbose_name="DNS")),
                ("ip_net", models.CharField(max_length=100, verbose_name="网段")),
                ("vlan_id", models.CharField(blank=True, max_length=100, null=True, verbose_name="VLAN ID")),
                ("business_system", models.CharField(blank=True, max_length=100, null=True, verbose_name="业务系统")),
                ("owner", models.CharField(blank=True, max_length=100, null=True, verbose_name="运维人员")),
                (
                    "custom_attr",
                    django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="自定义属性"),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="IpPools",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("create_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="创建时间")),
                ("update_at", models.DateTimeField(auto_now=True, null=True, verbose_name="更新时间")),
                ("create_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="创建人")),
                ("update_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="修改人")),
                ("description", models.CharField(blank=True, max_length=500, null=True, verbose_name="描述")),
                ("remark", models.CharField(blank=True, max_length=500, null=True, verbose_name="备注")),
                ("name", models.CharField(default="", max_length=200, unique=True, verbose_name="名称")),
                (
                    "status",
                    models.CharField(
                        choices=[("1", "waiting_enable"), ("2", "enabled"), ("3", "disabled"), ("4", "deleted")],
                        default=None,
                        max_length=100,
                        verbose_name="程序池状态",
                    ),
                ),
                (
                    "custom_attr",
                    django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="自定义属性"),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Ips",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=200, null=True, verbose_name="名称")),
                ("create_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="创建时间")),
                ("update_at", models.DateTimeField(auto_now=True, null=True, verbose_name="更新时间")),
                ("create_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="创建人")),
                ("update_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="修改人")),
                ("description", models.CharField(blank=True, max_length=500, null=True, verbose_name="描述")),
                ("remark", models.CharField(blank=True, max_length=500, null=True, verbose_name="备注")),
                ("ip", models.CharField(max_length=100, verbose_name="ip")),
                ("allocate_at", models.DateTimeField(blank=True, null=True, verbose_name="分配时间")),
                ("expired_at", models.DateTimeField(blank=True, null=True, verbose_name="过期时间")),
                (
                    "allocate_status",
                    models.CharField(
                        choices=[("1", "未分配"), ("2", "已分配"), ("3", "待回收"), ("4", "已回收")],
                        max_length=100,
                        verbose_name="分配状态",
                    ),
                ),
                ("allocate_way", models.CharField(blank=True, max_length=100, null=True, verbose_name="分配方式")),
                ("offline_at", models.DateTimeField(blank=True, null=True, verbose_name="离线时间")),
                ("scan_at", models.DateTimeField(blank=True, null=True, verbose_name="扫描时间")),
                ("online_status", models.BooleanField(default=False, verbose_name="在线状态")),
                ("reserve_status", models.BooleanField(default=False, verbose_name="保留状态")),
                ("business_system", models.CharField(blank=True, max_length=100, null=True, verbose_name="业务系统")),
                ("is_cmdb_sync", models.BooleanField(default=False, verbose_name="是否来自于CMDB同步")),
                ("recycle_waiting_days", models.IntegerField(default=0, verbose_name="回收等待天数")),
                ("owner", models.CharField(blank=True, max_length=100, null=True, verbose_name="ip所属者")),
                ("bk_cloud_id", models.IntegerField(blank=True, null=True, verbose_name="云区域ID")),
                ("gateway", models.CharField(blank=True, max_length=100, null=True, verbose_name="网关")),
                ("dns", models.CharField(blank=True, max_length=100, null=True, verbose_name="DNS")),
                (
                    "custom_attr",
                    django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="自定义属性"),
                ),
                (
                    "ip_net",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="home_application.IpNet"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OperationLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("operate_date", models.DateTimeField(auto_now_add=True, verbose_name="操作时间")),
                (
                    "operate_type",
                    models.CharField(
                        choices=[("add", "新增"), ("modify", "修改"), ("exec", "执行"), ("delete", "删除")],
                        max_length=100,
                        verbose_name="操作类型",
                    ),
                ),
                ("operate_obj", models.CharField(blank=True, max_length=100, null=True, verbose_name="操作对象")),
                ("operator", models.CharField(max_length=100, verbose_name="操作者")),
                ("operate_detail", models.TextField(verbose_name="操作详情")),
                ("result", models.BooleanField(verbose_name="操作结果")),
            ],
        ),
        migrations.CreateModel(
            name="Settings",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=128, unique=True, verbose_name="设置项")),
                ("value", models.TextField(blank=True, null=True, verbose_name="设置值")),
                ("desc", models.CharField(blank=True, max_length=255, null=True, verbose_name="设置描述")),
                ("extra", django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="扩展")),
            ],
        ),
        migrations.CreateModel(
            name="SystemGroup",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=64, unique=True, verbose_name="分组名称")),
                ("desc", models.CharField(blank=True, default="", max_length=128, verbose_name="分组描述")),
                ("can_modify", models.BooleanField(default=True, verbose_name="是否可以修改")),
                ("created_time", models.DateTimeField(auto_now_add=True, verbose_name="添加时间")),
                ("modified_time", models.DateTimeField(auto_now=True, verbose_name="修改时间")),
            ],
            options={
                "verbose_name": "系统用户分组",
            },
        ),
        migrations.CreateModel(
            name="SystemUser",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("bk_username", models.CharField(max_length=64, unique=True, verbose_name="用户名称")),
                ("qq", models.CharField(default="", max_length=20, verbose_name="qq账号")),
                ("bk_role", models.SmallIntegerField(verbose_name="用户角色")),
                ("phone", models.CharField(max_length=20, verbose_name="电话号码")),
                ("wx_userid", models.CharField(default="", max_length=64, verbose_name="微信ID")),
                ("email", models.CharField(max_length=64, verbose_name="邮箱地址")),
                ("chname", models.CharField(max_length=64, verbose_name="中文名称")),
                ("created_time", models.DateTimeField(auto_now_add=True, verbose_name="添加时间")),
                ("modified_time", models.DateTimeField(auto_now=True, verbose_name="修改时间")),
            ],
            options={
                "verbose_name": "系统用户",
            },
        ),
        migrations.CreateModel(
            name="SystemUserGroupRelation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "system_group",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="home_application.SystemGroup"),
                ),
                (
                    "system_user",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="home_application.SystemUser"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="systemuser",
            name="system_groups",
            field=models.ManyToManyField(
                through="home_application.SystemUserGroupRelation",
                to="home_application.SystemGroup",
                verbose_name="人员分组",
            ),
        ),
        migrations.CreateModel(
            name="OfflineExcept",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("create_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("create_by", models.CharField(max_length=100, verbose_name="创建者")),
                ("remark", models.CharField(max_length=500, verbose_name="备注")),
                ("ip", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="home_application.Ips")),
            ],
        ),
        migrations.CreateModel(
            name="IpPoolEventLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "event_type",
                    models.CharField(
                        choices=[("summary", "每日统计"), ("create", "创建"), ("update", "更新"), ("delete", "删除")],
                        max_length=100,
                    ),
                ),
                ("when_time", models.DateTimeField(auto_now_add=True)),
                ("event", django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="事件详情")),
                (
                    "ip_pool",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="home_application.IpPools"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="IpNetEventLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("off_line", "ip离线"),
                            ("on_line", "ip在线"),
                            ("create", "创建"),
                            ("update", "更新"),
                            ("delete", "删除"),
                            ("scan", "扫描"),
                            ("scan", "过期"),
                        ],
                        max_length=100,
                    ),
                ),
                ("when_time", models.DateTimeField(auto_now_add=True)),
                ("event", django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="事件详情")),
                ("ip_net", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="home_application.IpNet")),
            ],
        ),
        migrations.AddField(
            model_name="ipnet",
            name="ip_pool",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="home_application.IpPools"),
        ),
        migrations.CreateModel(
            name="IpEventLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("off_line", "ip离线"),
                            ("on_line", "ip在线"),
                            ("create", "创建"),
                            ("update", "更新"),
                            ("delete", "删除"),
                            ("scan", "扫描"),
                            ("scan", "过期"),
                        ],
                        max_length=100,
                    ),
                ),
                ("when_time", models.DateTimeField(auto_now_add=True)),
                ("event", django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="事件详情")),
                ("ip", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="home_application.Ips")),
            ],
        ),
        migrations.CreateModel(
            name="CmdbSyncRecord",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sync_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="同步时间")),
                ("complete_at", models.DateTimeField(blank=True, null=True, verbose_name="同步结束时间")),
                ("old_info", django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="同步前信息")),
                ("new_info", django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="同步后信息")),
                (
                    "sync_status",
                    models.CharField(
                        blank=True,
                        choices=[("0", "同步失败"), ("1", "同步成功"), ("2", "同步中")],
                        max_length=100,
                        null=True,
                        verbose_name="同步状态",
                    ),
                ),
                (
                    "cmdb_sync",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="home_application.CmdbSync"),
                ),
                (
                    "ip",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="home_application.Ips"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CmdbSyncObjects",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=200, null=True, verbose_name="名称")),
                ("create_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="创建时间")),
                ("update_at", models.DateTimeField(auto_now=True, null=True, verbose_name="更新时间")),
                ("create_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="创建人")),
                ("update_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="修改人")),
                ("description", models.CharField(blank=True, max_length=500, null=True, verbose_name="描述")),
                ("remark", models.CharField(blank=True, max_length=500, null=True, verbose_name="备注")),
                ("ip", models.CharField(max_length=100, verbose_name="IP")),
                ("clound_area", models.IntegerField(default=-1, verbose_name="区域")),
                ("extra_attr", django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="其他属性")),
                (
                    "cmdb_model",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="home_application.CmdbSync"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Apply",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=200, null=True, verbose_name="名称")),
                ("create_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="创建时间")),
                ("update_at", models.DateTimeField(auto_now=True, null=True, verbose_name="更新时间")),
                ("create_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="创建人")),
                ("update_by", models.CharField(blank=True, max_length=100, null=True, verbose_name="修改人")),
                ("description", models.CharField(blank=True, max_length=500, null=True, verbose_name="描述")),
                ("remark", models.CharField(blank=True, max_length=500, null=True, verbose_name="备注")),
                ("expired_time", models.DateTimeField(verbose_name="过期时间")),
                (
                    "apply_way",
                    models.CharField(
                        choices=[("API", "API申请"), ("MANUAL", "网页申请"), ("ADMIN", "管理员直接分配")],
                        max_length=100,
                        verbose_name="申请方式",
                    ),
                ),
                (
                    "apply_type",
                    models.CharField(choices=[("new", "IP申请"), ("renew", "续约申请")], max_length=100, verbose_name="申请类型"),
                ),
                (
                    "apply_status",
                    models.CharField(
                        choices=[("auditing", "待审核"), ("reject", "已拒绝"), ("approval", "已通过"), ("submiting", "待提交")],
                        max_length=100,
                        verbose_name="申请单状态",
                    ),
                ),
                ("auditor", models.CharField(max_length=100, verbose_name="审核人")),
                ("audit_time", models.DateTimeField(blank=True, null=True, verbose_name="审核时间")),
                ("apply_ips", django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="申请的IP")),
                ("apply_ip_count", models.IntegerField(blank=True, default=0, null=True, verbose_name="申请IP数量")),
                ("apply_person", models.CharField(blank=True, max_length=100, null=True, verbose_name="申请人")),
                ("apply_reason", models.CharField(blank=True, max_length=500, null=True, verbose_name="申请理由")),
                ("business_system", models.CharField(blank=True, max_length=100, null=True, verbose_name="业务系统")),
                ("refuse_reason", models.CharField(blank=True, max_length=500, null=True, verbose_name="拒绝理由")),
                (
                    "saved_ips",
                    django_mysql.models.JSONField(blank=True, default=dict, null=True, verbose_name="申请的IP留存"),
                ),
                (
                    "apply_ip_net",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="home_application.IpNet",
                    ),
                ),
                (
                    "apply_ip_pool",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="home_application.IpPools"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AbnormalIp",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("create_at", models.DateTimeField(auto_now_add=True, null=True, verbose_name="创建时间")),
                (
                    "abnormal_code",
                    models.CharField(
                        choices=[
                            ("1", "未分配但在线"),
                            ("2", "已分配但离线超过时限"),
                            ("3", "CMDB无此IP记录"),
                            ("4", "CMDB同步属性变动"),
                            ("5", "本地无此IP但CMDB中存在"),
                            ("6", "未分配但CMDB中存在"),
                        ],
                        max_length=100,
                        verbose_name="异常编码",
                    ),
                ),
                ("remark", models.TextField(blank=True, null=True, verbose_name="备注，描述")),
                ("checked", models.BooleanField(default=False, null=True, verbose_name="是否确认")),
                (
                    "ip",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="home_application.Ips"
                    ),
                ),
            ],
        ),
    ]
